/// <reference types="@virgilsecurity/core-foundation" />
export declare enum KeyPairType {
    DEFAULT = "DEFAULT",
    ED25519 = "ED25519",
    CURVE25519 = "CURVE25519",
    SECP256R1 = "SECP256R1",
    RSA_2048 = "RSA_2048",
    RSA_3072 = "RSA_3072",
    RSA_4096 = "RSA_4096",
    RSA_8192 = "RSA_8192",
    CURVE25519_ROUND5_ED25519_FALCON = "CURVE25519_ROUND5_ED25519_FALCON",
    CURVE25519_ED25519 = "CURVE25519_ED25519"
}
export interface KeyPairTypeConfig {
    type: KeyPairType;
    algId?: FoundationModules.AlgId;
    bitlen?: number;
    cipherAlgIds?: FoundationModules.AlgId[];
    signerAlgIds?: FoundationModules.AlgId[];
}
export declare const getKeyPairTypeConfig: (keyPairType: string | number | (() => string) | ((pos: number) => string) | ((index: number) => number) | ((...strings: string[]) => string) | ((searchString: string, position?: number | undefined) => number) | ((searchString: string, position?: number | undefined) => number) | {
    (that: string): number;
    (that: string, locales?: string | string[] | undefined, options?: Intl.CollatorOptions | undefined): number;
} | {
    (regexp: string | RegExp): RegExpMatchArray | null;
    (matcher: {
        [Symbol.match](string: string): RegExpMatchArray | null;
    }): RegExpMatchArray | null;
} | {
    (searchValue: string | RegExp, replaceValue: string): string;
    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
    (searchValue: {
        [Symbol.replace](string: string, replaceValue: string): string;
    }, replaceValue: string): string;
    (searchValue: {
        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
    }, replacer: (substring: string, ...args: any[]) => string): string;
} | {
    (regexp: string | RegExp): number;
    (searcher: {
        [Symbol.search](string: string): number;
    }): number;
} | ((start?: number | undefined, end?: number | undefined) => string) | {
    (separator: string | RegExp, limit?: number | undefined): string[];
    (splitter: {
        [Symbol.split](string: string, limit?: number | undefined): string[];
    }, limit?: number | undefined): string[];
} | ((start: number, end?: number | undefined) => string) | (() => string) | ((locales?: string | string[] | undefined) => string) | (() => string) | ((locales?: string | string[] | undefined) => string) | (() => string) | ((from: number, length?: number | undefined) => string) | (() => string) | ((pos: number) => number | undefined) | ((searchString: string, position?: number | undefined) => boolean) | ((searchString: string, endPosition?: number | undefined) => boolean) | {
    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
    (form?: string | undefined): string;
} | ((count: number) => string) | ((searchString: string, position?: number | undefined) => boolean) | ((name: string) => string) | (() => string) | (() => string) | (() => string) | (() => string) | ((color: string) => string) | {
    (size: number): string;
    (size: string): string;
} | (() => string) | ((url: string) => string) | (() => string) | (() => string) | (() => string) | (() => string) | ((maxLength: number, fillString?: string | undefined) => string) | ((maxLength: number, fillString?: string | undefined) => string) | (() => string) | (() => string)) => KeyPairTypeConfig;
export declare const isRSAKeyPairType: (keyPairType: string | number | (() => string) | ((pos: number) => string) | ((index: number) => number) | ((...strings: string[]) => string) | ((searchString: string, position?: number | undefined) => number) | ((searchString: string, position?: number | undefined) => number) | {
    (that: string): number;
    (that: string, locales?: string | string[] | undefined, options?: Intl.CollatorOptions | undefined): number;
} | {
    (regexp: string | RegExp): RegExpMatchArray | null;
    (matcher: {
        [Symbol.match](string: string): RegExpMatchArray | null;
    }): RegExpMatchArray | null;
} | {
    (searchValue: string | RegExp, replaceValue: string): string;
    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
    (searchValue: {
        [Symbol.replace](string: string, replaceValue: string): string;
    }, replaceValue: string): string;
    (searchValue: {
        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
    }, replacer: (substring: string, ...args: any[]) => string): string;
} | {
    (regexp: string | RegExp): number;
    (searcher: {
        [Symbol.search](string: string): number;
    }): number;
} | ((start?: number | undefined, end?: number | undefined) => string) | {
    (separator: string | RegExp, limit?: number | undefined): string[];
    (splitter: {
        [Symbol.split](string: string, limit?: number | undefined): string[];
    }, limit?: number | undefined): string[];
} | ((start: number, end?: number | undefined) => string) | (() => string) | ((locales?: string | string[] | undefined) => string) | (() => string) | ((locales?: string | string[] | undefined) => string) | (() => string) | ((from: number, length?: number | undefined) => string) | (() => string) | ((pos: number) => number | undefined) | ((searchString: string, position?: number | undefined) => boolean) | ((searchString: string, endPosition?: number | undefined) => boolean) | {
    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
    (form?: string | undefined): string;
} | ((count: number) => string) | ((searchString: string, position?: number | undefined) => boolean) | ((name: string) => string) | (() => string) | (() => string) | (() => string) | (() => string) | ((color: string) => string) | {
    (size: number): string;
    (size: string): string;
} | (() => string) | ((url: string) => string) | (() => string) | (() => string) | (() => string) | (() => string) | ((maxLength: number, fillString?: string | undefined) => string) | ((maxLength: number, fillString?: string | undefined) => string) | (() => string) | (() => string)) => boolean;
export declare const isCompoundKeyPairType: (keyPairType: string | number | (() => string) | ((pos: number) => string) | ((index: number) => number) | ((...strings: string[]) => string) | ((searchString: string, position?: number | undefined) => number) | ((searchString: string, position?: number | undefined) => number) | {
    (that: string): number;
    (that: string, locales?: string | string[] | undefined, options?: Intl.CollatorOptions | undefined): number;
} | {
    (regexp: string | RegExp): RegExpMatchArray | null;
    (matcher: {
        [Symbol.match](string: string): RegExpMatchArray | null;
    }): RegExpMatchArray | null;
} | {
    (searchValue: string | RegExp, replaceValue: string): string;
    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
    (searchValue: {
        [Symbol.replace](string: string, replaceValue: string): string;
    }, replaceValue: string): string;
    (searchValue: {
        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
    }, replacer: (substring: string, ...args: any[]) => string): string;
} | {
    (regexp: string | RegExp): number;
    (searcher: {
        [Symbol.search](string: string): number;
    }): number;
} | ((start?: number | undefined, end?: number | undefined) => string) | {
    (separator: string | RegExp, limit?: number | undefined): string[];
    (splitter: {
        [Symbol.split](string: string, limit?: number | undefined): string[];
    }, limit?: number | undefined): string[];
} | ((start: number, end?: number | undefined) => string) | (() => string) | ((locales?: string | string[] | undefined) => string) | (() => string) | ((locales?: string | string[] | undefined) => string) | (() => string) | ((from: number, length?: number | undefined) => string) | (() => string) | ((pos: number) => number | undefined) | ((searchString: string, position?: number | undefined) => boolean) | ((searchString: string, endPosition?: number | undefined) => boolean) | {
    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
    (form?: string | undefined): string;
} | ((count: number) => string) | ((searchString: string, position?: number | undefined) => boolean) | ((name: string) => string) | (() => string) | (() => string) | (() => string) | (() => string) | ((color: string) => string) | {
    (size: number): string;
    (size: string): string;
} | (() => string) | ((url: string) => string) | (() => string) | (() => string) | (() => string) | (() => string) | ((maxLength: number, fillString?: string | undefined) => string) | ((maxLength: number, fillString?: string | undefined) => string) | (() => string) | (() => string)) => boolean;
