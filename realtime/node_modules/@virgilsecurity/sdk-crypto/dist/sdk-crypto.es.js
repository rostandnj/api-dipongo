class VirgilAccessTokenSigner {
    constructor(crypto) {
        if (crypto == null) {
            throw new Error('`crypto` is required');
        }
        this.crypto = crypto;
    }
    getAlgorithm() {
        return 'VEDS512';
    }
    generateTokenSignature(token, privateKey) {
        return this.crypto.calculateSignature(token, privateKey);
    }
    verifyTokenSignature(token, signature, publicKey) {
        return this.crypto.verifySignature(token, signature, publicKey);
    }
}

class VirgilCardCrypto {
    constructor(crypto) {
        if (crypto == null) {
            throw new Error('`crypto` is required');
        }
        this.crypto = crypto;
    }
    generateSignature(data, privateKey) {
        return this.crypto.calculateSignature(data, privateKey);
    }
    verifySignature(data, signature, publicKey) {
        return this.crypto.verifySignature(data, signature, publicKey);
    }
    exportPublicKey(publicKey) {
        return this.crypto.exportPublicKey(publicKey);
    }
    importPublicKey(publicKeyData) {
        return this.crypto.importPublicKey(publicKeyData);
    }
    generateSha512(data) {
        return this.crypto.calculateHash(data);
    }
}

class VirgilPrivateKeyExporter {
    constructor(crypto) {
        if (crypto == null) {
            throw new Error('`crypto` is required');
        }
        this.crypto = crypto;
    }
    exportPrivateKey(key) {
        return this.crypto.exportPrivateKey(key);
    }
    importPrivateKey(keyData) {
        return this.crypto.importPrivateKey(keyData);
    }
}

export { VirgilAccessTokenSigner, VirgilCardCrypto, VirgilPrivateKeyExporter };
