'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const createDataToUint8ArrayFunction = (NodeBuffer) => (data, defaultEncoding) => {
    if (typeof data === 'string') {
        if (typeof defaultEncoding === 'string' && !NodeBuffer.isEncoding(defaultEncoding)) {
            throw new TypeError('Invalid default encoding.');
        }
        return NodeBuffer.from(data, defaultEncoding);
    }
    if (data instanceof Uint8Array) {
        return data;
    }
    if (typeof data === 'object' &&
        typeof data.value === 'string' &&
        NodeBuffer.isEncoding(data.encoding)) {
        return NodeBuffer.from(data.value, data.encoding);
    }
    throw new TypeError("Invalid format of 'Data'.");
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const createToBufferFunction = (NodeBuffer) => (array) => {
    let buffer = NodeBuffer.from(array.buffer);
    if (array.byteLength !== array.buffer.byteLength) {
        buffer = buffer.slice(array.byteOffset, array.byteOffset + array.byteLength);
    }
    return buffer;
};

const NodeBuffer = global.Buffer;
const dataToUint8Array = createDataToUint8ArrayFunction(NodeBuffer);
const toBuffer = createToBufferFunction(NodeBuffer);

exports.NodeBuffer = NodeBuffer;
exports.dataToUint8Array = dataToUint8Array;
exports.toBuffer = toBuffer;
