import EventEmmiter from 'eventemitter3';
declare type InitializationFunction<T> = (...args: any[]) => Promise<T>;
export declare enum ModuleInitializerEvents {
    load = "load",
    remove = "remove",
    error = "error"
}
export declare class ModuleInitializer extends EventEmmiter {
    private readonly initFns;
    private readonly initPromises;
    private readonly modules;
    private loadModulesPromise;
    addModule: <T>(name: string, initFn: InitializationFunction<T>) => void;
    getModule: <T>(name: string) => T;
    hasModule: (name: string) => boolean;
    setModule: <T>(name: string, module: T) => void;
    removeModule: (name: string) => void;
    loadModule: (name: string, ...args: any[]) => Promise<void>;
    loadModules: (args?: {
        [name: string]: any[];
    } | undefined) => Promise<void>;
}
export {};
